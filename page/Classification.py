# Import th∆∞ vi·ªán
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
import graphviz

# CSS b·∫£ng D·ªØ li·ªáu ƒë√£ t·∫£i l√™n
custom_data_table_css = """
    <style>
        .data-table-container {
            display: flex;
            justify-content: center; /* CƒÉn gi·ªØa b·∫£ng */
            align-items: center;
            margin: 20px auto; /* CƒÉn gi·ªØa b·∫£ng */
            max-width: 100%; /* Gi·ªõi h·∫°n chi·ªÅu r·ªông */
            overflow-x: auto; /* Th√™m cu·ªôn ngang n·∫øu b·∫£ng qu√° r·ªông */
        }
        .data-table {
            border-collapse: collapse;
            font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ */
            font-family: Arial, sans-serif;
            width: 100%; /* Chi·∫øm to√†n b·ªô chi·ªÅu r·ªông khung */
            text-align: center;
            border: 1px solid #ddd; /* Vi·ªÅn b·∫£ng */
            color: #023047;
        }

        .data-table th {
            background-color: #27b8b5; /* M√†u n·ªÅn ti√™u ƒë·ªÅ */
            color: #FFFFFF; /* M√†u ch·ªØ ti√™u ƒë·ªÅ */
            padding: 10px;
            text-align: center;
        }

        .data-table td {
            padding: 8px 10px;
            text-align: center;
        }

        .data-table tr:nth-child(even) {
            background-color: #e1fcfc; /* M√†u n·ªÅn d√≤ng ch·∫µn */
        }

        .data-table tr:nth-child(odd) {
            background-color: #ffffff; /* M√†u n·ªÅn d√≤ng l·∫ª */
        }

        .data-table tr:hover {
            background-color: #8ECAE6; /* M√†u n·ªÅn khi hover */
            color: #000000; /* M√†u ch·ªØ khi hover */
        }
    </style>
"""

def draw_table(df):
    data_html = df.to_html(
        index=False,
        classes='data-table',  # Th√™m class ƒë·ªÉ √°p d·ª•ng CSS
        border=0
    )
    # Hi·ªÉn th·ªã CSS v√† b·∫£ng HTML
    st.markdown(custom_data_table_css, unsafe_allow_html=True)
    st.markdown(
        f'<div class="data-table-container">{data_html}</div>', unsafe_allow_html=True) 

# H√†m m√£ h√≥a d·ªØ li·ªáu
def feature_encoding(dataframe, columns_to_encode):
    encoders = {}
    for column in columns_to_encode:
        encoder = LabelEncoder()
        dataframe[column] = encoder.fit_transform(dataframe[column])
        encoders[column] = {cls: val for cls, val in zip(encoder.classes_, encoder.transform(encoder.classes_))}
    return dataframe, encoders

# V·∫Ω c√¢y quy·∫øt ƒë·ªãnh
def visualize_decision_tree(dataframe, metric):
    features = dataframe.drop(columns=["L·ªõp"])
    target = dataframe["L·ªõp"].map({'P': 1, 'N': 0})

    features, encoders = feature_encoding(features, features.columns)
    split_metric = "entropy" if metric == "ƒê·ªô l·ª£i th√¥ng tin" else "gini"

    decision_tree = DecisionTreeClassifier(criterion=split_metric)
    decision_tree.fit(features, target)

    tree_graph = export_graphviz(
        decision_tree, out_file=None, feature_names=features.columns,
        class_names=["N", "P"], filled=True, rounded=True
    )
    st.graphviz_chart(graphviz.Source(tree_graph), use_container_width=True)

# Ph√¢n l·ªõp m·∫´u
def predict_sample(dataframe, classifier_type, input_features):
    features = dataframe.drop(columns=['L·ªõp'])
    target = dataframe['L·ªõp'].map({'P': 1, 'N': 0})

    features, encoders = feature_encoding(features, features.columns)
    model = (
        DecisionTreeClassifier(criterion="entropy") 
        if classifier_type == "C√¢y quy·∫øt ƒë·ªãnh" 
        else GaussianNB()
    )
    model.fit(features, target)

    try:
        encoded_input = [encoders[col].get(input_features[col], -1) for col in features.columns]
        prediction = model.predict([encoded_input])
        predicted_class = 'P' if prediction[0] == 1 else 'N'
        st.markdown("üîé **:blue[D·ª± ƒëo√°n:]**")
        st.info(f" **L·ªõp '{predicted_class}'**")
    except Exception as error:
        st.error(f"L·ªói: {error}")


# ·ª®ng d·ª•ng ch√≠nh
def app():
    st.subheader("1Ô∏è‚É£ Ch·ªçn t·ªáp tin:")
    uploaded_file = st.file_uploader("T·∫£i file d·ªØ li·ªáu (CSV):", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.info("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")
        draw_table(df)

        # V·∫Ω c√¢y quy·∫øt ƒë·ªãnh
        st.subheader("2Ô∏è‚É£ V·∫Ω c√¢y quy·∫øt ƒë·ªãnh:")
        with st.container(border=1):
            algorithm = st.selectbox("Ch·ªçn thu·∫≠t to√°n:", ["None", "Thu·∫≠t to√°n ID3"])
            if algorithm == "Thu·∫≠t to√°n ID3":
                measure = st.selectbox("Ch·ªçn ƒë·ªô ƒëo:", ["ƒê·ªô l·ª£i th√¥ng tin", "Ch·ªâ s·ªë Gini"])
            if st.button("T·∫°o c√¢y quy·∫øt ƒë·ªãnh"):
                visualize_decision_tree(df, measure)

        # Ph√¢n l·ªõp m·∫´u
        st.subheader("3Ô∏è‚É£ Ph√¢n l·ªõp cho m·∫´u:")
        with st.container(border=1):
            method = st.selectbox("Ch·ªçn thu·∫≠t to√°n ph√¢n l·ªõp:", ["None", "C√¢y quy·∫øt ƒë·ªãnh", "Naive Bayes"])
            if method != "None":
                features = {
                    'Th·ªùi ti·∫øt': st.selectbox("Th·ªùi ti·∫øt:", ['N·∫Øng', 'U √°m', 'M∆∞a']),
                    'Nhi·ªát ƒë·ªô': st.selectbox("Nhi·ªát ƒë·ªô:", ['N√≥ng', '·∫§m √°p', 'M√°t']),
                    'ƒê·ªô ·∫©m': st.selectbox("ƒê·ªô ·∫©m:", ['Cao', 'V·ª´a']),
                    'Gi√≥': st.selectbox("Gi√≥:", ['C√≥', 'Kh√¥ng'])
                }
                if st.button("D·ª± ƒëo√°n"):
                    predict_sample(df, method, features)
    else:
        st.warning("Vui l√≤ng t·∫£i t·ªáp d·ªØ li·ªáu ƒë·ªÉ ti·∫øp t·ª•c")
