import streamlit as st
import pandas as pd
from sklearn.cluster import KMeans
from minisom import MiniSom
import numpy as np
import matplotlib.pyplot as plt

# CSS b·∫£ng D·ªØ li·ªáu ƒë√£ t·∫£i l√™n
custom_data_table_css = """
    <style>
        .data-table-container {
            display: flex;
            justify-content: center; /* CƒÉn gi·ªØa b·∫£ng */
            align-items: center;
            margin: 20px auto; /* CƒÉn gi·ªØa b·∫£ng */
            max-width: 100%; /* Gi·ªõi h·∫°n chi·ªÅu r·ªông */
            overflow-x: auto; /* Th√™m cu·ªôn ngang n·∫øu b·∫£ng qu√° r·ªông */
        }
        .data-table {
            border-collapse: collapse;
            font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ */
            font-family: Arial, sans-serif;
            width: 100%; /* Chi·∫øm to√†n b·ªô chi·ªÅu r·ªông khung */
            text-align: center;
            border: 1px solid #ddd; /* Vi·ªÅn b·∫£ng */
            color: #023047;
        }

        .data-table th {
            background-color: #27b8b5; /* M√†u n·ªÅn ti√™u ƒë·ªÅ */
            color: #FFFFFF; /* M√†u ch·ªØ ti√™u ƒë·ªÅ */
            padding: 10px;
            text-align: center;
        }

        .data-table td {
            padding: 8px 10px;
            text-align: center;
        }

        .data-table tr:nth-child(even) {
            background-color: #e1fcfc; /* M√†u n·ªÅn d√≤ng ch·∫µn */
        }

        .data-table tr:nth-child(odd) {
            background-color: #ffffff; /* M√†u n·ªÅn d√≤ng l·∫ª */
        }

        .data-table tr:hover {
            background-color: #8ECAE6; /* M√†u n·ªÅn khi hover */
            color: #000000; /* M√†u ch·ªØ khi hover */
        }
    </style>
"""

def draw_table(df):
    data_html = df.to_html(
        index=False,
        classes='data-table',  # Th√™m class ƒë·ªÉ √°p d·ª•ng CSS
        border=0
    )
    # Hi·ªÉn th·ªã CSS v√† b·∫£ng HTML
    st.markdown(custom_data_table_css, unsafe_allow_html=True)
    st.markdown(
        f'<div class="data-table-container">{data_html}</div>', unsafe_allow_html=True) 

def app():
    # Upload file CSV
    st.subheader("1Ô∏è‚É£ Ch·ªçn t·ªáp tin:")
    uploaded_file = st.file_uploader("T·∫£i file d·ªØ li·ªáu (CSV):", type=["csv"])
    if uploaded_file:
        # N·∫øu file ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n
        df = pd.read_csv(uploaded_file, sep=';')
        # CSS t√πy ch·ªânh cho b·∫£ng D·ªØ li·ªáu ƒë√£ t·∫£i l√™n
        st.info("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")

        # Chuy·ªÉn DataFrame th√†nh HTML v·ªõi class ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng
        draw_table(df)
        
        st.subheader("2Ô∏è‚É£ Ch·ªçn thu·∫≠t to√°n gom c·ª•m:")

        # Ch·ªçn thu·∫≠t to√°n
        algorithm = st.selectbox("Ch·ªçn thu·∫≠t to√°n:", ["K-means", "Kohonen"])

        # X·ª≠ l√Ω K-means
        if algorithm == "K-means":
            k = st.number_input("S·ªë c·ª•m (k):", min_value=1, max_value=20, step=1, value=3)

            if st.button("Th·ª±c hi·ªán K-means", key="kmeans"):
                # √Åp d·ª•ng thu·∫≠t to√°n K-means
                kmeans_model = KMeans(n_clusters=k, random_state=0)
                kmeans_model.fit(df)
                df["Gom c·ª•m"] = kmeans_model.labels_

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n c·ª•m
                st.info("üîé **K·∫øt qu·∫£ K-means:**")
                table_html = df.to_html(index=False, classes="data-table", border=0)
                st.markdown(f'<div class="data-table-container">{table_html}</div>', unsafe_allow_html=True)

                # Hi·ªÉn th·ªã vector tr·ªçng t√¢m
                st.info("üîé **Vector tr·ªçng t√¢m:**")
                cluster_centroids = pd.DataFrame(kmeans_model.cluster_centers_, columns=["x", "y"])
                cluster_centroids.insert(0, "Gom c·ª•m", [f"Gom c·ª•m {i+1}" for i in range(len(cluster_centroids))])
                centroid_html = cluster_centroids.to_html(index=False, classes="data-table", border=0)
                st.markdown(f'<div class="data-table-container">{centroid_html}</div>', unsafe_allow_html=True)

                # V·∫Ω bi·ªÉu ƒë·ªì K-means
                st.info("üîé **Bi·ªÉu ƒë·ªì K-means:**")
                plt.figure(figsize=(8, 6))
                plt.scatter(df.iloc[:, 0], df.iloc[:, 1], c=kmeans_model.labels_, cmap="viridis")
                plt.colorbar(label="Gom c·ª•m")
                plt.title("K-means Clustering")
                plt.xlabel(df.columns[0])
                plt.ylabel(df.columns[1])
                st.pyplot(plt)

        # X·ª≠ l√Ω Kohonen SOM
        elif algorithm == "Kohonen":
            som_width = st.number_input("Chi·ªÅu r·ªông b·∫£n ƒë·ªì:", min_value=1, step=1, value=5)
            som_height = st.number_input("Chi·ªÅu cao b·∫£n ƒë·ªì:", min_value=1, step=1, value=5)
            num_epochs = st.number_input("S·ªë l·∫ßn l·∫∑p:", min_value=1, step=1, value=100)
            learning_rate = st.number_input("T·ªëc ƒë·ªô h·ªçc:", min_value=0.01, max_value=1.0, step=0.01, value=0.5)
            radius = st.number_input("B√°n k√≠nh v√πng l√¢n c·∫≠n:", min_value=1, step=1, value=2)

            if st.button("Th·ª±c hi·ªán Kohonen", key="kohonen"):
                # Chu·∫©n b·ªã v√† chu·∫©n h√≥a d·ªØ li·ªáu
                data = df.values
                normalized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)

                # Hu·∫•n luy·ªán Kohonen SOM
                som = MiniSom(som_width, som_height, normalized_data.shape[1], sigma=radius, learning_rate=learning_rate)
                som.random_weights_init(normalized_data)
                som.train_random(normalized_data, num_epochs)

                # G√°n c·ª•m
                df["Gom c·ª•m"] = [f"{node[0]}-{node[1]}" for node in [som.winner(d) for d in normalized_data]]

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n c·ª•m
                st.info("üîé **K·∫øt qu·∫£ Kohonen:**")
                som_html = df.to_html(index=False, classes="data-table", border=0)
                st.markdown(f'<div class="data-table-container">{som_html}</div>', unsafe_allow_html=True)

                # Hi·ªÉn th·ªã tr·ªçng s·ªë n√∫t
                st.info("üîé **Tr·ªçng s·ªë c√°c n√∫t:**")
                weights = som.get_weights()
                # T·∫°o DataFrame t·ª´ tr·ªçng s·ªë c√°c n√∫t
                weights_df = pd.DataFrame(
                    [
                        {f"N√∫t {j}": [round(float(w), 4) for w in weights[i][j]] for j in range(len(weights[i]))}
                        for i in range(len(weights))
                    ]
                )
                weights_html = weights_df.to_html(index=False, classes="data-table", border=0)
                st.markdown(f'<div class="data-table-container">{weights_html}</div>', unsafe_allow_html=True)

                # V·∫Ω bi·ªÉu ƒë·ªì SOM
                st.info("üîé **Bi·ªÉu ƒë·ªì Kohonen SOM:**")
                plt.figure(figsize=(8, 6))
                x_coords, y_coords = zip(*[som.winner(d) for d in normalized_data])
                plt.scatter(x_coords, y_coords, c=[som.winner(d)[0] for d in normalized_data], cmap="viridis", marker="o")
                plt.title("Kohonen SOM Clustering")
                plt.colorbar(label="Gom c·ª•m")
                plt.xlabel("X")
                plt.ylabel("Y")
                st.pyplot(plt)

    else:
        st.warning("Vui l√≤ng t·∫£i t·ªáp d·ªØ li·ªáu ƒë·ªÉ ti·∫øp t·ª•c.")

