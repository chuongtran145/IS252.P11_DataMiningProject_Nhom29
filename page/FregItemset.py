import streamlit as st
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder

# CSS b·∫£ng D·ªØ li·ªáu ƒë√£ t·∫£i l√™n
custom_data_table_css = """
    <style>
        .data-table-container {
            display: flex;
            justify-content: center; /* CƒÉn gi·ªØa b·∫£ng */
            align-items: center;
            margin: 20px auto; /* CƒÉn gi·ªØa b·∫£ng */
            max-width: 100%; /* Gi·ªõi h·∫°n chi·ªÅu r·ªông */
            overflow-x: auto; /* Th√™m cu·ªôn ngang n·∫øu b·∫£ng qu√° r·ªông */
        }
        .data-table {
            border-collapse: collapse;
            font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ */
            font-family: Arial, sans-serif;
            width: 100%; /* Chi·∫øm to√†n b·ªô chi·ªÅu r·ªông khung */
            text-align: center;
            border: 1px solid #ddd; /* Vi·ªÅn b·∫£ng */
            color: #023047;
        }

        .data-table th {
            background-color: #27b8b5; /* M√†u n·ªÅn ti√™u ƒë·ªÅ */
            color: #FFFFFF; /* M√†u ch·ªØ ti√™u ƒë·ªÅ */
            padding: 10px;
            text-align: center;
        }

        .data-table td {
            padding: 8px 10px;
            text-align: center;
        }

        .data-table tr:nth-child(even) {
            background-color: #e1fcfc; /* M√†u n·ªÅn d√≤ng ch·∫µn */
        }

        .data-table tr:nth-child(odd) {
            background-color: #ffffff; /* M√†u n·ªÅn d√≤ng l·∫ª */
        }

        .data-table tr:hover {
            background-color: #8ECAE6; /* M√†u n·ªÅn khi hover */
            color: #000000; /* M√†u ch·ªØ khi hover */
        }
    </style>
"""

def draw_table(df):
    data_html = df.to_html(
        index=False,
        classes='data-table',  # Th√™m class ƒë·ªÉ √°p d·ª•ng CSS
        border=0
    )
    # Hi·ªÉn th·ªã CSS v√† b·∫£ng HTML
    st.markdown(custom_data_table_css, unsafe_allow_html=True)
    st.markdown(
        f'<div class="data-table-container">{data_html}</div>', unsafe_allow_html=True) 

def app():
    # Load data

    st.subheader("1Ô∏è‚É£ Ch·ªçn t·ªáp tin:")
    file = st.file_uploader("Ch·ªçn t·ªáp d·ªØ li·ªáu (CSV ho·∫∑c XLSX)", type=['csv', 'xlsx'])

    # Ki·ªÉm tra data
    if file is not None:
        try:
            # ƒê·ªçc file
            if file.name.endswith('.csv'):
                df = pd.read_csv(file)
            elif file.name.endswith('.xlsx'):
                df = pd.read_excel(file)

            # Ki·ªÉm tra d·ªØ li·ªáu
            if "Ma hoa don" not in df.columns or "Ma hang" not in df.columns:
                st.error(
                    "T·ªáp tin c·∫ßn c√≥ c√°c c·ªôt: 'Ma hoa don' v√† 'Ma hang'.")
            else:
                st.info("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")

                # Hi·ªÉn th·ªã CSS v√† b·∫£ng HTML
                draw_table(df)

                # Ch·ªçn c√°ch t√≠nh
                st.subheader("2Ô∏è‚É£ Ch·ªçn c√°ch t√≠nh:")
                with st.container(border=1):
                    option = st.selectbox(
                        "Ch·ªçn thu·∫≠t to√°n:",
                        options=["", "T√¨m t·∫≠p ph·ªï bi·∫øn","T√¨m t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i", "T√¨m lu·∫≠t k·∫øt h·ª£p"])

                    # C√°c tham s·ªë ƒë·∫ßu v√†o
                    if option in ["T√¨m t·∫≠p ph·ªï bi·∫øn", "T√¨m t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i"]:
                        minsupp = st.number_input(
                            "Nh·∫≠p gi√° tr·ªã min_sup (0.01 - 1.0):",
                            min_value=0.01, max_value=1.0, value=0.1, step=0.01
                        )
                    elif option == "T√¨m lu·∫≠t k·∫øt h·ª£p":
                        minsupp = st.number_input(
                            "Nh·∫≠p gi√° tr·ªã min_sup (0.01 - 1.0):",
                            min_value=0.01, max_value=1.0, value=0.1, step=0.01
                        )
                        mincoff = st.number_input(
                            "Nh·∫≠p gi√° tr·ªã min_coff (0.01 - 1.0):",
                            min_value=0.01, max_value=1.0, value=0.5, step=0.01
                        )

                # N√∫t ch·∫°y thu·∫≠t to√°n
                if st.button("Ch·∫°y thu·∫≠t to√°n"):
                    # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
                    transactions = df.groupby('Ma hoa don')['Ma hang'].apply(list).tolist()
                    te = TransactionEncoder()
                    te_ary = te.fit(transactions).transform(transactions)
                    df_encoded = pd.DataFrame(te_ary, columns=te.columns_)

                    # Th·ª±c thi thu·∫≠t to√°n theo l·ª±a ch·ªçn
                    if option == "T√¨m t·∫≠p ph·ªï bi·∫øn":
                        # √Åp d·ª•ng thu·∫≠t to√°n Apriori
                        frequent_itemsets = apriori(df_encoded, min_support=minsupp, use_colnames=True)
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        st.info("üîé **C√°c t·∫≠p ph·ªï bi·∫øn:**")
                        draw_table(frequent_itemsets)

                    elif option == "T√¨m t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i":
                        # T√¨m t·∫≠p ph·ªï bi·∫øn
                        frequent_itemsets = apriori(df_encoded, min_support=minsupp, use_colnames=True)
                        
                        # Kh·ªüi t·∫°o danh s√°ch c√°c t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i
                        max_itemsets = [
                            itemset for idx, itemset in frequent_itemsets.iterrows()
                            if all(
                                not set(itemset['itemsets']).issubset(sub_itemset['itemsets'])
                                for sub_idx, sub_itemset in frequent_itemsets.iterrows()
                                if len(itemset['itemsets']) < len(sub_itemset['itemsets'])
                            )
                        ]
                        # Chuy·ªÉn ƒë·ªïi danh s√°ch th√†nh DataFrame v√† hi·ªÉn th·ªã
                        max_itemsets_df = pd.DataFrame(max_itemsets)
                        st.info("üîé **C√°c t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i:**")
                        draw_table(max_itemsets_df)

                    elif option == "T√¨m lu·∫≠t k·∫øt h·ª£p":
                        # √Åp d·ª•ng thu·∫≠t to√°n Apriori
                        frequent_itemsets = apriori(df_encoded, min_support=minsupp, use_colnames=True)

                        if frequent_itemsets.empty:
                            st.warning("Kh√¥ng c√≥ t·∫≠p ph·ªï bi·∫øn n√†o th·ªèa m√£n ng∆∞·ª°ng min_sup ƒë√£ ch·ªçn.")
                        else:
                            # T√¨m t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i
                            max_itemsets = [
                                itemset for idx, itemset in frequent_itemsets.iterrows()
                                if all(
                                    not set(itemset['itemsets']).issubset(sub_itemset['itemsets'])
                                    for sub_idx, sub_itemset in frequent_itemsets.iterrows()
                                    if len(itemset['itemsets']) < len(sub_itemset['itemsets'])
                                )
                            ]
                            max_itemsets_df = pd.DataFrame(max_itemsets)

                            if max_itemsets_df.empty:
                                st.warning("Kh√¥ng c√≥ t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i n√†o.")
                            else:
                                try:
                                    # T·∫°o lu·∫≠t k·∫øt h·ª£p
                                    rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=mincoff)

                                    # L·ªçc lu·∫≠t k·∫øt h·ª£p li√™n quan ƒë·∫øn t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i
                                    filtered_rules = rules[
                                        rules['antecedents'].apply(lambda x: any(set(x).issubset(fs) for fs in max_itemsets_df['itemsets'])) &
                                        rules['consequents'].apply(lambda x: any(set(x).issubset(fs) for fs in max_itemsets_df['itemsets']))
                                    ]

                                    if filtered_rules.empty:
                                        st.warning("Kh√¥ng c√≥ lu·∫≠t k·∫øt h·ª£p n√†o th·ªèa m√£n ng∆∞·ª°ng min_cof v√† lift > 1.")
                                    else:
                                        # Gi·ªØ c√°c c·ªôt c·∫ßn thi·∫øt v√† hi·ªÉn th·ªã
                                        filtered_rules = filtered_rules[['antecedents', 'consequents', 'confidence']]
                                        st.info("üîé **C√°c lu·∫≠t k·∫øt h·ª£p t·ª´ t·∫≠p ph·ªï bi·∫øn t·ªëi ƒë·∫°i:**")
                                        draw_table(filtered_rules)

                                except Exception as e:
                                    st.error(f"ƒê√£ x·∫£y ra l·ªói khi t√¨m lu·∫≠t k·∫øt h·ª£p: {e}")

        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {e}")
    else:
        st.warning("Vui l√≤ng t·∫£i t·ªáp d·ªØ li·ªáu ƒë·ªÉ ti·∫øp t·ª•c")
